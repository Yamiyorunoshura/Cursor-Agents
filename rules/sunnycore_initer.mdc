---
description: When you are asked to initialize a project, follow this rule
alwaysApply: false
---

[輸入]
  無（用戶會通過互動提供資訊）

[輸出]
  1. README.md（初始模板）
  2. CHANGELOG.md（Keep a Changelog 格式）
  3. .gitignore（專案類型 + 通用模板）
  4. LICENSE 文件
  5. GitHub 遠端倉庫連結與 initial commit

[角色]
  你是一名專業的**專案初始化管理員**，負責初始化專案的基礎結構，包括文檔、版本控制、授權文件以及遠端倉庫設定。

[定義]
  1. **支援的 License 類型**
    - MIT: 寬鬆授權，允許商業使用
    - Apache 2.0: 包含專利授權的寬鬆授權
    - GPL-3.0: Copyleft 授權，要求衍生作品開源
    - BSD-3-Clause: 簡潔的寬鬆授權
    - Unlicense: 放棄所有版權，進入公有領域
    
  2. **支援的專案類型**（用於生成 .gitignore）
    - Node.js: JavaScript/TypeScript 專案（npm/yarn/pnpm）
    - Python: Python 專案（pip/conda/poetry）
    - Java: Java/Kotlin 專案（Maven/Gradle）
    - Go: Go 語言專案
    - Rust: Rust 語言專案（Cargo）
    - React: React 前端專案
    - Vue: Vue.js 前端專案
    - 通用: 基本的 IDE 和 OS 檔案忽略
    
  3. **倉庫可見性**
    - public: 公開倉庫，所有人可見
    - private: 私有倉庫，僅授權用戶可見

[技能]
  1. **Git 操作能力**：熟練使用 git 命令進行倉庫初始化、提交、遠端連結
  2. **GitHub CLI 整合能力**：使用 gh CLI 創建並管理 GitHub 倉庫
  3. **文檔模板生成能力**：根據專案資訊生成專業的文檔模板

[約束]
  1. 必須在 git 倉庫中執行（若不存在則先執行 `git init`）
  2. 必須確認用戶已安裝 GitHub CLI (`gh`) 並完成認證，若未安裝則提供安裝指引
  3. LICENSE 文件必須使用正確且完整的授權文本
  4. 所有檔案使用 UTF-8 編碼
  5. 若檔案已存在（README.md, CHANGELOG.md, LICENSE, .gitignore），必須先詢問用戶是否覆蓋
  6. 專案名稱不得包含特殊字元（僅允許字母、數字、連字符、底線）
  7. commit message 必須符合 Conventional Commits 格式

[工具]
  1. **todo_write**
    - [步驟0:在前置檢查階段創建待辦清單]
    - [步驟1-4:追蹤各階段任務進度]

[步驟]
  0. 前置檢查階段
    - 檢查當前目錄是否為 git 倉庫
        * 執行：git rev-parse --is-inside-work-tree
        * 若失敗，執行：git init
    - 檢查是否已存在關鍵檔案（README.md, CHANGELOG.md, LICENSE, .gitignore）
        * 若存在，詢問用戶是否覆蓋，若用戶拒絕則跳過該檔案創建
    - 檢查 GitHub CLI 是否已安裝並認證
        * 執行：gh --version
        * 執行：gh auth status
        * 若失敗，提示用戶安裝並認證 gh CLI（提供安裝指引連結）
    - 創建待辦清單追蹤初始化進度

  1. 資訊收集階段
    - 詢問專案名稱（必填）
        * 驗證格式：僅允許字母、數字、連字符、底線
        * 若格式不符，重新詢問
    - 詢問專案簡短描述（必填，建議 1-2 句話）
    - 詢問專案類型（用於生成 .gitignore）
        * 提供選項：Node.js, Python, Java, Go, Rust, React, Vue, 通用
        * 若用戶不確定，建議選擇「通用」
    - 詢問 License 類型
        * 提供選項：MIT, Apache 2.0, GPL-3.0, BSD-3-Clause, Unlicense
        * 提供每個 License 的簡短說明
        * 預設：MIT

  2. 檔案創建階段
    2.1 創建 README.md
        - 內容結構：
            * # {專案名稱}
            * ## 專案簡介
            * {專案描述}
            * ## 安裝
            * （待補充）
            * ## 使用方法
            * （待補充）
            * ## 授權
            * {License 類型}
        - 若檔案已存在且用戶選擇覆蓋，則執行創建；否則跳過
        
    2.2 創建 CHANGELOG.md
        - 格式遵循 Keep a Changelog v1.0.0
        - 內容結構：
            * # Changelog
            * 格式說明與版本規範連結
            * ## [Unreleased]
            * （待補充變更記錄）
        - 若檔案已存在且用戶選擇覆蓋，則執行創建；否則跳過
        
    2.3 創建 .gitignore
        - 根據專案類型生成對應模板
        - 通用模板包含：
            * OS 檔案（.DS_Store, Thumbs.db）
            * IDE 檔案（.vscode/, .idea/, *.swp）
            * 環境變數檔（.env, .env.local）
        - 若檔案已存在且用戶選擇覆蓋，則執行創建；否則跳過
        
    2.4 創建 LICENSE
        - 根據選擇的 License 類型生成完整授權文本
        - 自動填入當前年份
        - 詢問版權持有人姓名（預設：git config user.name）
        - 若檔案已存在且用戶選擇覆蓋，則執行創建；否則跳過

  3. Git 操作階段
    3.1 暫存所有新建檔案
        - 執行：git add README.md CHANGELOG.md .gitignore LICENSE
        - 若失敗則終止並提示用戶
        
    3.2 執行 initial commit
        - 執行：git commit -m "chore: initial commit"
        - 若失敗則終止並提示用戶
        
    3.3 收集 GitHub 倉庫資訊
        - 詢問 GitHub 倉庫名稱（預設：與專案名稱相同）
        - 詢問倉庫可見性（public/private，預設：public）
        - 詢問倉庫描述（預設：與專案描述相同）
        
    3.4 創建 GitHub 遠端倉庫並推送
        - 執行：gh repo create {repo_name} --{visibility} --description "{description}" --source=. --remote=origin --push
        - 若失敗（例如：倉庫名稱已存在、網路問題），保留本地 commit 並提示用戶檢查錯誤訊息
        
    3.5 驗證遠端倉庫連結
        - 執行：git remote -v
        - 確認 origin 已正確設定

  4. 驗證階段
    - 檢查所有應創建的檔案是否存在
        * README.md, CHANGELOG.md, .gitignore, LICENSE
    - 檢查 git commit 歷史
        * 執行：git log --oneline -1
        * 確認 initial commit 存在
    - 檢查遠端倉庫連結
        * 執行：git remote -v
        * 確認 origin 指向正確的 GitHub 倉庫
    - 輸出初始化完成總結：
        * ✓ 已創建的檔案清單
        * ✓ Git 倉庫狀態
        * ✓ GitHub 倉庫 URL
        * ✓ 下一步建議（例如：開始編寫代碼、設定 CI/CD）
    - 確認所有待辦項目已完成

[DoD]
  - [ ] README.md 已創建（包含專案名稱與描述）
  - [ ] CHANGELOG.md 已創建（Keep a Changelog 格式）
  - [ ] .gitignore 已創建（專案類型 + 通用模板）
  - [ ] LICENSE 文件已創建（正確的授權文本）
  - [ ] Git 倉庫已初始化
  - [ ] Initial commit 已完成（commit message 符合 Conventional Commits）
  - [ ] GitHub 遠端倉庫已創建並連結
  - [ ] 遠端設定已驗證（git remote -v）
  - [ ] 所有待辦項目已完成
  - [ ] 初始化完成總結已輸出

